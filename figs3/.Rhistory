n,'_simulated_data.csv')
working.df <- read.csv(fileName, header=TRUE, row.names = 1)
working.lmer <- lmer(Results ~ on + (1|group), data = working.df)
working.test <- glht(working.lmer,linfct=c('on==0')) |>
tidy(conf.int = TRUE) |>
mutate(Condition = condition)
}) |> bind_rows()
}) |> bind_rows() |>
dplyr::select(Condition, estimate, conf.low, conf.high, adj.p.value)
write.csv(results_df, 'figs3stats.csv', row.names = F)
}
# Analyzing data
if (reanal_data){
results_df <- lapply(conditions, function(condition){
nested_df <- lapply(sample.size, function(n){
fileName <- paste0('sim_data/',
condition,
'_sample_size_',
n,'_simulated_data.csv')
working.df <- read.csv(fileName, header=TRUE, row.names = 1)
working.lmer <- lmer(Results ~ on + (1|group), data = working.df)
working.test <- glht(working.lmer,linfct=c('on==0')) |>
tidy(conf.int = TRUE) |>
mutate(Condition = condition)
}) |> bind_rows()
}) |> bind_rows() |>
dplyr::select(Condition, estimate, conf.low, conf.high, adj.p.value)
write.csv(results_df, 'figss3stats.csv', row.names = F)
}
# Analyzing data
if (reanal_data){
results_df <- lapply(conditions, function(condition){
nested_df <- lapply(sample.size, function(n){
fileName <- paste0('sim_data/',
condition,
'_sample_size_',
n,'_simulated_data.csv')
working.df <- read.csv(fileName, header=TRUE, row.names = 1)
working.lmer <- lmer(Results ~ on + (1|group), data = working.df)
working.test <- glht(working.lmer,linfct=c('on==0')) |>
tidy(conf.int = TRUE) |>
mutate(n = n)
}) |> bind_rows() |>
mutate(Condition = condition)
}) |> bind_rows() |>
dplyr::select(Condition, estimate, conf.low, conf.high, adj.p.value)
write.csv(results_df, 'figss3stats.csv', row.names = F)
}
condition <- conditions[1]
n <- 3
fileName <- paste0('sim_data/',
condition,
'_sample_size_',
n,'_simulated_data.csv')
working.df <- read.csv(fileName, header=TRUE, row.names = 1)
working.lmer <- lmer(Results ~ on + (1|group), data = working.df)
n <- 5
fileName <- paste0('sim_data/',
condition,
'_sample_size_',
n,'_simulated_data.csv')
working.df <- read.csv(fileName, header=TRUE, row.names = 1)
working.lmer <- lmer(Results ~ on + (1|group), data = working.df)
working.test <- glht(working.lmer,linfct=c('on==0')) |>
tidy(conf.int = TRUE) |>
mutate(n = n)
working.df
working.lmer <- lmer(Results ~ on + (1|group), data = working.df)
isSingular(working.lmer)
# Analyzing data
if (reanal_data){
results_df <- lapply(conditions, function(condition){
nested_df <- lapply(sample.size, function(n){
fileName <- paste0('sim_data/',
condition,
'_sample_size_',
n,'_simulated_data.csv')
working.df <- read.csv(fileName, header=TRUE, row.names = 1)
working.lmer <- lmer(Results ~ on + (1|group), data = working.df)
working.singular <- isSingular(working.lmer)
working.test <- glht(working.lmer,linfct=c('on==0')) |>
tidy(conf.int = TRUE) |>
mutate(n = n,
Singular = working.singular)
}) |> bind_rows() |>
mutate(Condition = condition)
}) |> bind_rows() |>
dplyr::select(Condition, estimate, conf.low, conf.high, adj.p.value)
write.csv(results_df, 'figss3stats.csv', row.names = F)
}
results_df
# Analyzing data
if (reanal_data){
results_df <- lapply(conditions, function(condition){
nested_df <- lapply(sample.size, function(n){
fileName <- paste0('sim_data/',
condition,
'_sample_size_',
n,'_simulated_data.csv')
working.df <- read.csv(fileName, header=TRUE, row.names = 1)
working.lmer <- lmer(Results ~ on + (1|group), data = working.df)
working.singular <- isSingular(working.lmer)
working.test <- glht(working.lmer,linfct=c('on==0')) |>
tidy(conf.int = TRUE) |>
mutate(n = n,
Singular = working.singular)
}) |> bind_rows() |>
mutate(Condition = condition)
}) |> bind_rows() |>
dplyr::select(Condition, n, Singular, estimate, conf.low, conf.high, adj.p.value)
write.csv(results_df, 'figss3stats.csv', row.names = F)
}
results_df
working.lmer <- lmer(Results ~ on, data = working.df)
working.lm <- lm(Results ~ on, data = working.df)
working.lm
working.lmer
working.lmer <- lmer(Results ~ on + (1|group), data = working.df)
if (isSingular(working.lmer)){
working.lmer <- lm(Results ~ on, data = working.df)
}
working.test <- glht(working.lmer,linfct=c('on==0')) |>
tidy(conf.int = TRUE) |>
mutate(n = n,
Singular = working.singular)
# Analyzing data
if (reanal_data){
results_df <- lapply(conditions, function(condition){
nested_df <- lapply(sample.size, function(n){
fileName <- paste0('sim_data/',
condition,
'_sample_size_',
n,'_simulated_data.csv')
working.df <- read.csv(fileName, header=TRUE, row.names = 1)
working.lmer <- lmer(Results ~ on + (1|group), data = working.df)
if (isSingular(working.lmer)){
working.lmer <- lm(Results ~ on, data = working.df)
}
working.test <- glht(working.lmer,linfct=c('on==0')) |>
tidy(conf.int = TRUE) |>
mutate(n = n,
isSingular = isSingular(working.lmer))
}) |> bind_rows() |>
mutate(Condition = condition)
}) |> bind_rows() |>
dplyr::select(Condition, n, Singular, estimate, conf.low, conf.high, adj.p.value)
write.csv(results_df, 'figss3stats.csv', row.names = F)
}
Singular <- isSingular(working.lmer)
# Analyzing data
if (reanal_data){
results_df <- lapply(conditions, function(condition){
nested_df <- lapply(sample.size, function(n){
fileName <- paste0('sim_data/',
condition,
'_sample_size_',
n,'_simulated_data.csv')
working.df <- read.csv(fileName, header=TRUE, row.names = 1)
working.lmer <- lmer(Results ~ on + (1|group), data = working.df)
Singular <- isSingular(working.lmer)
if (Singular){ # refit just a linear model
working.lmer <- lm(Results ~ on, data = working.df)
}
working.test <- glht(working.lmer,linfct=c('on==0')) |>
tidy(conf.int = TRUE) |>
mutate(n = n,
isSingular = Singular)
}) |> bind_rows() |>
mutate(Condition = condition)
}) |> bind_rows() |>
dplyr::select(Condition, n, Singular, estimate, conf.low, conf.high, adj.p.value)
write.csv(results_df, 'figss3stats.csv', row.names = F)
}
# Analyzing data
if (reanal_data){
results_df <- lapply(conditions, function(condition){
nested_df <- lapply(sample.size, function(n){
fileName <- paste0('sim_data/',
condition,
'_sample_size_',
n,'_simulated_data.csv')
working.df <- read.csv(fileName, header=TRUE, row.names = 1)
working.lmer <- lmer(Results ~ on + (1|group), data = working.df)
Singular <- isSingular(working.lmer)
if (Singular){ # refit just a linear model
working.lmer <- lm(Results ~ on, data = working.df)
}
working.test <- glht(working.lmer,linfct=c('on==0')) |>
tidy(conf.int = TRUE) |>
mutate(n = n,
isSingular = Singular)
}) |> bind_rows() |>
mutate(Condition = condition)
}) |> bind_rows() |>
dplyr::select(Condition, n, isSingular, estimate, conf.low, conf.high, adj.p.value)
write.csv(results_df, 'figss3stats.csv', row.names = F)
}
results_df
# Analyzing data
if (reanal_data){
results_df <- lapply(conditions, function(condition){
nested_df <- lapply(sample.size, function(n){
fileName <- paste0('sim_data/',
condition,
'_sample_size_',
n,'_simulated_data.csv')
working.df <- read.csv(fileName, header=TRUE, row.names = 1)
working.lmer <- lmer(Results ~ on + (1|group), data = working.df)
Singular <- isSingular(working.lmer)
if (Singular){ # refit without random effects
working.lmer <- lm(Results ~ on, data = working.df)
}
working.test <- glht(working.lmer,linfct=c('on==0')) |>
tidy(conf.int = TRUE) |>
mutate(n = n,
isSingular = Singular)
}) |> bind_rows() |>
mutate(Condition = condition)
}) |> bind_rows() |>
dplyr::select(Condition, n, isSingular, estimate, conf.low, conf.high, adj.p.value)
write.csv(results_df, 'figss3stats.csv', row.names = F)
}
source("~/Library/CloudStorage/Box-Box/BooleanStats/Stats_Code/fig3/analyze_data.R")
source("~/Library/CloudStorage/Box-Box/BooleanStats/Stats_Code/fig3/analyze_data.R")
source("~/Library/CloudStorage/Box-Box/BooleanStats/Stats_Code/fig3/analyze_data.R")
source("~/Library/CloudStorage/Box-Box/BooleanStats/Stats_Code/fig3/analyze_data.R")
source("~/Library/CloudStorage/Box-Box/BooleanStats/Stats_Code/figs3/analyze_data.R")
setwd("~/Library/CloudStorage/Box-Box/BooleanStats/Stats_Code/figs3")
set.seed(2024)
library(lme4)
library(dplyr)
library(broom)
library(multcomp)
source("simulate_data.R")
resim_data <- TRUE
reanal_data <- TRUE
# Define simulation conditions
sample.size <- c(3,5,30)
new.cond <- read.csv("simulation_conditions.csv",row.names=1,header=TRUE)
conditions <- new.cond |> row.names()
conditions_logics <- c(conditions[1:8], "OR") # specific to this case
# Define logics
and.logic <- c(0, 0, 0, 1)
or.logic <- c(0, 1, 1, 1)
nand.logic <- c(1, 1, 1, 0)
nor.logic <- c(1, 0, 0, 0)
xnor.logic <- c(1, 0, 0, 1)
xor.logic <- c(0, 1, 1, 0)
imply.logic <- c(1,0,1,1)
nimply.logic <- c(0,1,0,0)
# Order logics
logic_list <- list('AND' = and.logic,
'OR' = or.logic,
'NAND' = nand.logic,
'NOR' = nor.logic,
'XNOR' = xnor.logic,
'XOR' = xor.logic,
'IMPLY' = imply.logic,
'NIMPLY' = nimply.logic)
# Simulating data
if (resim_data){
for (j in 1:length(sample.size)){
n <- sample.size[j]
for (i in 1:length(conditions)){
condition <- conditions[[i]]
logic <- logic_list[[conditions_logics[[i]]]]
results <- simulate_data(new.cond[i,],
n,
logic,
paste0('sim_data/',
condition),
write.file = TRUE)
}
}
}
# Analyzing data
if (reanal_data){
results_df <- lapply(conditions, function(condition){
nested_df <- lapply(sample.size, function(n){
fileName <- paste0('sim_data/',
condition,
'_sample_size_',
n,'_simulated_data.csv')
working.df <- read.csv(fileName, header=TRUE, row.names = 1)
working.lmer <- lmer(Results ~ on + (1|group), data = working.df)
Singular <- isSingular(working.lmer)
if (Singular){ # refit without random effects
working.lmer <- lm(Results ~ on, data = working.df)
}
working.test <- glht(working.lmer,linfct=c('on==0')) |>
tidy(conf.int = TRUE) |>
mutate(n = n,
isSingular = Singular)
}) |> bind_rows() |>
mutate(Condition = condition)
}) |> bind_rows() |>
dplyr::select(Condition, n, isSingular, estimate, conf.low, conf.high, adj.p.value)
write.csv(results_df, 'figss3stats.csv', row.names = F)
}
source("simulate_data.R") # allows to pass a variance input, fraction of the mean response.
set.seed(2024)
library('lme4')
library('effects')
library('broom')
library('multcomp')
setwd("~/Library/CloudStorage/Box-Box/BooleanStats/Stats_Code/figs3")
source("simulate_data.R") # allows to pass a variance input, fraction of the mean response.
set.seed(2024)
library('lme4')
library('effects')
library('broom')
library('multcomp')
# Define simulation conditions
new.cond <- read.csv("simulation_conditions.csv",row.names=1,header=TRUE)
conditions <- new.cond |> row.names()
conditions_logics <- c(conditions[1:8], "OR") # specific to this case
n.mc <- 1e4 # number of monte carlo simulations
n.to.try <- 2:30
1e4
variances <- 1:10 * 0.1
variances
variance.values <- 1:10 * 0.1
conditions
setwd("~/Library/CloudStorage/Box-Box/BooleanStats/Stats_Code/figs3")
source("simulate_data.R") # allows to pass a variance input, fraction of the mean response.
set.seed(2024)
library('lme4')
library('effects')
library('broom')
library('multcomp')
# Define logics
and.logic <- c(0, 0, 0, 1)
or.logic <- c(0, 1, 1, 1)
nand.logic <- c(1, 1, 1, 0)
nor.logic <- c(1, 0, 0, 0)
xnor.logic <- c(1, 0, 0, 1)
xor.logic <- c(0, 1, 1, 0)
imply.logic <- c(1,0,1,1)
nimply.logic <- c(0,1,0,0)
# Order logics
logic_list <- list('AND' = and.logic,
'OR' = or.logic,
'NAND' = nand.logic,
'NOR' = nor.logic,
'XNOR' = xnor.logic,
'XOR' = xor.logic,
'IMPLY' = imply.logic,
'NIMPLY' = nimply.logic)
# Define simulation conditions
new.cond <- read.csv("simulation_conditions.csv",row.names=1,header=TRUE)
conditions <- new.cond |> row.names()
conditions_logics <- c(conditions[1:8], "OR") # specific to this case
n.to.try <- 2:30
n.mc <- 1e4 # number of monte carlo simulations
variance.values <- 1:10 * 0.1
or.logic <- c(0, 1, 1, 1)
conditions
variance.values
n.to.try
setwd("~/Library/CloudStorage/Box-Box/BooleanStats/Stats_Code/figs3")
source("simulate_data.R") # allows to pass a variance input, fraction of the mean response.
set.seed(2024)
library('lme4')
library('effects')
library('broom')
library('multcomp')
# Define logics
and.logic <- c(0, 0, 0, 1)
or.logic <- c(0, 1, 1, 1)
nand.logic <- c(1, 1, 1, 0)
nor.logic <- c(1, 0, 0, 0)
xnor.logic <- c(1, 0, 0, 1)
xor.logic <- c(0, 1, 1, 0)
imply.logic <- c(1,0,1,1)
nimply.logic <- c(0,1,0,0)
# Order logics
logic_list <- list('AND' = and.logic,
'OR' = or.logic,
'NAND' = nand.logic,
'NOR' = nor.logic,
'XNOR' = xnor.logic,
'XOR' = xor.logic,
'IMPLY' = imply.logic,
'NIMPLY' = nimply.logic)
# Define simulation conditions
new.cond <- read.csv("simulation_conditions.csv",row.names=1,header=TRUE)
conditions <- new.cond |> row.names()
conditions_logics <- c(conditions[1:8], "OR") # specific to this case
samples <- 2:30
n.mc <- 1e4 # number of monte carlo simulations
variance.values <- 1:10 * 0.1
or.logic <- c(0, 1, 1, 1)
i <- 1
m <- 1
j <- 1
condition <- conditions[i]
variance <- variance.values[m]
beta.store <- matrix(nrow=length(samples),ncol=n.mc) # init
p.value <- matrix(nrow=length(samples),ncol=n.mc) # init
variance
beta.store
p.value
logic <- logic_list[[conditions_logics[[i]]]]
logic
results <- simulate_data(new.cond[i,],
n,
logic,
paste0('sim_data/',
condition),
variance = variance,
write.file = TRUE)
new.cond
results <- simulate_data(new.cond[i,],
n,
logic,
paste0('sim_data/',
condition),
variance = variance,
write.file = FALSE)
n
n <- samples[j]
results <- simulate_data(new.cond[i,],
n,
logic,
paste0('sim_data/',
condition),
variance = variance,
write.file = FALSE)
results
working.lmer <- lm(Results ~ on, data = working.df)
working.df <- simulate_data(new.cond[i,],
n,
logic,
paste0('sim_data/',
condition),
variance = variance,
write.file = FALSE)
working.lmer <- lm(Results ~ on, data = working.df)
workingl.mer
working.lmer
beta.estimate <- (coef(working.lmer))$group$on1[1]
beta.estimate
coef(working.lmer)
working.lmer <- lmer(Results ~ on + (1|group), data = working.df)
beta.estimate <- (coef(working.lmer))$group$on1[1]
coef(working.lmer))$group
coef(working.lmer)$group
(coef(working.lmer))$group$on1
beta.estimate <- (coef(working.lmer))$group$on[1]
beta.estimate
working.lmer <- lm(Results ~ on, data = working.df)
beta.estimate <- coef(working.lmer)[['on']]
beta.estimate
coef(working.lmer)
working.lmer <- lmer(Results ~ on + (1|group), data = working.df)
coef(working.lmer)[['group']][['on']]
coef(working.lmer)[['group']][['on']][1]
working.lmer <- lmer(Results ~ on + (1|group), data = working.df)
answer <- summary(glht(working.lmer,linfct=c('on==0')))
answer
working.lmer <- lm(Results ~ on, data = working.df)
answer <- summary(glht(working.lmer,linfct=c('on==0')))
answer
samples
for (m in 1:length(variance.values)){ # for each variance
variance <- variance.values[m]
beta.store <- matrix(nrow=length(samples),ncol=n.mc) # init
p.value <- matrix(nrow=length(samples),ncol=n.mc) # init
singular.store <- matrix(nrow=length(samples),ncol=n.mc) # init
for (j in 1:length(samples)){ # for each sample size
n <- samples[j]
for (k in 1:n.mc){ # monte carlo simulation
working.df <- simulate_data(new.cond[i,],
n,
logic,
paste0('sim_data/',
condition),
variance = variance,
write.file = FALSE)
working.lmer <- lmer(Results ~ on + (1|group), data = working.df)
Singular <- isSingular(working.lmer)
if (Singular){ # refit without random effects
working.lmer <- lm(Results ~ on, data = working.df)
beta.estimate <- coef(working.lmer)[['on']]
} else {
beta.estimate <- coef(working.lmer)[['group']][['on']][1]
}
answer <- summary(glht(working.lmer,linfct=c('on==0')))
beta.store[j,k] <- beta.estimate
p.value[j,k] <- answer$test$pvalues[1]
singular.store[j,k] <- Singular
}
cat(paste0('Done with sample size ',n,' in gate number ',
condition,' and variance fraction ',variance,'.\n'))
}
beta.store <- data.frame(beta.store, row.names = samples)
colnames(beta.store) <- 1:n.mc
beta.store <- t(beta.store)
write.csv(beta.store,paste0('beta_montecarlo/',condition,
'_betas_var_',variance,'.csv'))
p.value <- data.frame(p.value, row.names = samples)
colnames(p.value) <- 1:n.mc
p.value <- t(p.value)
write.csv(p.value,paste0('beta_montecarlo/',condition,
'_pvals_var_',variance,'.csv'))
singularities <- data.frame(singular.store, row.names = samples)
colnames(singularities) <- 1:n.mc
singularities <- t(singularities)
write.csv(singularities,paste0('beta_montecarlo/',condition,
'_singularities_var_',variance,'.csv'))
}
source("~/Library/CloudStorage/Box-Box/BooleanStats/Stats_Code/figs3/power_analysis.R")
